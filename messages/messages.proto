syntax = "proto3";
package messages;

option go_package = "./messages";

// Existing messages...
message Handshake {
    string message = 1;
}

message HandshakeResponse {
    bool success = 1;
    string message = 2;
}

message RegisterUser {
    string username = 1;
}

message RegisterUserResponse {
    bool success = 1;
    string error = 2;
}

message CreatePost {
    string content = 1;
    string author = 2;
    string subreddit = 3;
}

message CreatePostResponse {
    bool success = 1;
    string error = 2;
    string post_id = 3;
}

// New messages for subreddit operations
message CreateSubreddit {
    string name = 1;
    string description = 2;
    string creator = 3;
}

message CreateSubredditResponse {
    bool success = 1;
    string error = 2;
}

message JoinSubreddit {
    string username = 1;
    string subreddit_name = 2;
}

message JoinSubredditResponse {
    bool success = 1;
    string error = 2;
}

message LeaveSubreddit {
    string username = 1;
    string subreddit_name = 2;
}

message LeaveSubredditResponse {
    bool success = 1;
    string error = 2;
}

// Vote messages
message Vote {
    string voter = 1;
    string id = 2;           // Can be either post_id or comment_id
    bool is_upvote = 3;      // true for upvote, false for downvote
    bool is_post = 4;        // true if voting on post, false if comment
}

message VoteResponse {
    bool success = 1;
    string error = 2;
    int32 current_karma = 3;
}

// Comment messages
message CreateComment {
    string content = 1;
    string author = 2;
    string post_id = 3;
    string parent_comment_id = 4;  // Optional, for nested comments
}

message CreateCommentResponse {
    bool success = 1;
    string error = 2;
    string comment_id = 3;
    repeated string child_comment_ids = 4;  // New field to store child comment IDs
}

// Karma query messages
message GetKarma {
    string username = 1;
}

message GetKarmaResponse {
    bool success = 1;
    string error = 2;
    int32 post_karma = 3;
    int32 comment_karma = 4;
    int32 total_karma = 5;
}

message GetFeed {
    string subreddit = 1; // Optional - if empty, returns global feed
    int32 limit = 2; // Maximum number of posts to return
    int32 offset = 3; // Offset for pagination
}

message GetFeedResponse {
    bool success = 1;
    string error = 2;
    repeated Post posts = 3;
}

message Post {
    string id = 1;
    string content = 2;
    string author = 3;
    string subreddit = 4;
    int32 karma = 5;
    repeated string comments = 6;
    int64 created_at = 7;
}

message DirectMessage {
    string id = 1;
    string from_user = 2;
    string to_user = 3;
    string content = 4;
    int64 timestamp = 5;
    bool is_read = 6;
}

message SendDirectMessage {
    string from_user = 1;
    string to_user = 2;
    string content = 3;
}

message SendDirectMessageResponse {
    bool success = 1;
    DirectMessage message = 2;
}

message GetDirectMessages {
    string username = 1;
}

message GetDirectMessagesResponse {
    repeated DirectMessage messages = 1;
}

message ReplyDirectMessage {
    string reply_to_message_id = 1;
    string from_user = 2;
    string content = 3;
}

message ReplyDirectMessageResponse {
    bool success = 1;
    DirectMessage message = 2;
}
